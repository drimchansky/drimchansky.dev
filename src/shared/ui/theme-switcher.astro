---
import type { ColorTheme } from '@/shared/constants'

import { getTestId } from '@/shared/functions/getTestId'
import { t, type LocaleCollection } from '@/shared/i18n'

import TypographySpan from './typography/typography-span.astro'

const values: ColorTheme[] = ['light', 'auto', 'dark']
---

<fieldset data-testid={getTestId('theme-switcher')} id="theme-switcher" class="theme-switcher" data-nosnippet disabled>
  <legend class="visually-hidden">{t(Astro.currentLocale, 'theme')}</legend>

  <div class="theme-switcher__options" id="theme-options">
    {
      values.map(value => (
        <label class="theme-switcher__option-label">
          <input
            data-testid={getTestId(`set-${value}-theme-button`)}
            class="theme-switcher__option-input"
            name="color-theme"
            type="radio"
            value={value}
          />
          <TypographySpan class="theme-switcher__text">
            {t(Astro.currentLocale, value as keyof LocaleCollection)}
          </TypographySpan>
        </label>
      ))
    }
  </div>
</fieldset>

<script is:inline>
  ;(() => {
    function applyPageTheme() {
      const theme = localStorage.getItem('color-theme') || 'auto'
      document.documentElement.classList.toggle('is-dark-theme', theme === 'dark')
      document.documentElement.classList.toggle('is-light-theme', theme === 'light')
    }

    function updateSwitcherStateAfterNavigation() {
      const themeOptionsElement = document.getElementById('theme-options')
      const theme = localStorage.getItem('color-theme') || 'auto'

      if (themeOptionsElement) {
        const input = themeOptionsElement.querySelector(`[value="${theme}"]`)
        input.checked = true
      }
    }

    applyPageTheme()
    updateSwitcherStateAfterNavigation()
    document.addEventListener('astro:after-swap', applyPageTheme)
    document.addEventListener('astro:after-swap', updateSwitcherStateAfterNavigation)
  })()
</script>

<script>
  import { THEME_CLASSES, THEME_STORAGE_KEY, type ColorTheme } from '@/shared/constants'

  const applyTheme = (theme: ColorTheme) => {
    const switcherElement = document.getElementById('theme-switcher')! as HTMLFieldSetElement
    const themeOptionsElement = switcherElement.querySelector('#theme-options')!

    if (themeOptionsElement) {
      const input = themeOptionsElement.querySelector(`[value="${theme}"]`)! as HTMLInputElement
      input.checked = true
    }

    document.documentElement.classList.toggle(THEME_CLASSES['dark']!, theme === 'dark')
    document.documentElement.classList.toggle(THEME_CLASSES['light']!, theme === 'light')
  }

  const onThemeChange = (event: Event) => {
    const target = event.target as HTMLInputElement
    const newTheme = target.value as ColorTheme

    if (!newTheme) return

    localStorage.setItem(THEME_STORAGE_KEY, newTheme)
    applyTheme(newTheme)
  }

  const onStorageChange = (event: StorageEvent) => {
    if (event.key !== THEME_STORAGE_KEY) return

    const newTheme = event.newValue as ColorTheme
    if (!newTheme) return

    applyTheme(newTheme)
  }

  const onPageLoaded = () => {
    const switcherElement = document.getElementById('theme-switcher')! as HTMLFieldSetElement
    const themeOptionsElement = switcherElement.querySelector('#theme-options')!

    switcherElement.disabled = false
    themeOptionsElement.addEventListener('change', onThemeChange)
  }

  window.addEventListener('DOMContentLoaded', onPageLoaded)
  window.addEventListener('storage', onStorageChange)
  document.addEventListener('astro:after-swap', onPageLoaded)
</script>

<style>
  @import '@/shared/styles//mixins.css';

  .theme-switcher {
    padding: 0;
    border: unset;
    margin: 0;
  }

  .theme-switcher__options {
    display: flex;
    padding: 0.25rem;
    border: 1px solid var(--c-theme-switcher-border);
    border-radius: 50px;
    background: var(--c-theme-switcher-bg);
    color: var(--c-theme-switcher-text);
  }

  .theme-switcher__option-label {
    position: relative;
  }

  .theme-switcher__option-input {
    @mixin focus;

    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    border: 0;
    border-radius: 20px;
    margin: 0;
    appearance: none;
    background: 0 0;
    cursor: pointer;

    &:hover + .theme-switcher__text {
      opacity: 1;
    }

    &:checked + .theme-switcher__text {
      background: var(--c-theme-switcher-select);
      opacity: 1;
    }
  }

  .theme-switcher .theme-switcher__text {
    display: block;
    padding: 0.4em 0.67em;
    border: 0;
    border-radius: 2em;
    margin: 0;
    appearance: none;
    background-color: transparent;
    color: inherit;
    line-height: 1;
    opacity: 0.7;
  }
</style>
