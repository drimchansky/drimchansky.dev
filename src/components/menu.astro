---
import type { HTMLAttributes } from 'astro/types'

import { getRelativeLocaleUrl } from 'astro:i18n'

import LangSwitcLink from '@/components/lang-swith-link.astro'
import ThemeSwitcher from '@/components/theme-switcher.astro'
import { siteInfo } from '@/data/site-info'
import { getLocale, t } from '@/i18n'
import { getTestId } from '@/utils/functions/getTestId'

import TypographySpan from './typography/TypographySpan.astro'

interface Props extends HTMLAttributes<'nav'> {}

const { class: className, ...props } = Astro.props

const pathname = new URL(Astro.request.url).pathname
const locale = getLocale(Astro.currentLocale)
const currentRoute = pathname.slice(1).replace(`${locale}`, '').slice(0, -1) || '/'
---

<nav data-testid={getTestId('menu')} class:list={['menu', 'menu-closed', className]} {...props}>
  <ul class="list">
    {
      siteInfo.navigation.map(({ id, route }) => (
        <li class="item">
          <a
            data-testid={getTestId(`open-${id}-link`)}
            class={`link ${currentRoute === route ? 'active' : ''}`}
            href={getRelativeLocaleUrl(locale, route)}
            data-prefetch
          >
            <TypographySpan>{t(Astro.currentLocale, id)}</TypographySpan>
          </a>
        </li>
      ))
    }
  </ul>

  <LangSwitcLink />
  <ThemeSwitcher />
</nav>

<style>
  @import '../styles/media.css';
  @import '../styles/mixins.css';

  .menu {
    position: fixed;
    left: 0px;
    display: none;
    width: 100%;
    padding: 16px var(--page-padding-x);
    background: var(--c-menu-bg);
    gap: 1rem;
    grid-template-rows: auto repeat(2, min-content);
    inset-block: var(--header-height) 0;
    justify-items: center;
    overflow-y: auto;
  }

  .menu-opened {
    display: grid;
  }

  .menu-closed {
    display: none;
  }

  .list {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 0;
    margin: 0;
    gap: 0.5rem;
    list-style-type: none;
  }

  .item {
    padding: 0.25rem;
  }

  .link {
    @mixin focus;

    display: inline-flex;
    padding: 0.5rem;
    border-radius: 5px;
    background: var(--c-menu-link-bg);
    color: var(--c-menu-link-text);
    text-decoration: none;
    transition:
      background-color var(--link-hover-duration),
      color var(--link-hover-duration);

    @media (hover: hover) {
      &:hover {
        background: var(--c-menu-link-bg-hover);
        color: var(--c-menu-link-text-hover);
      }
    }

    &.active {
      opacity: 0.7;
    }
  }

  @media (--viewport-small) {
    .list {
      flex-direction: row;
      justify-self: start;
    }

    .menu {
      position: static;
      display: grid;
      align-items: center;
      padding: 0;
      background: transparent;
      grid-template-columns: auto repeat(2, min-content);
      grid-template-rows: unset;
    }

    .hamburger {
      display: none;
    }
  }
</style>
