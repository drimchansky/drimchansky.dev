---
import { t } from '@/i18n'
---

<fieldset class="switcher" data-nosnippet>
  <legend class="visually-hidden">{t(Astro.currentLocale, 'theme')}</legend>

  <div class="toggle" id="theme-toggle">
    <label class="label">
      <input class="input" name="color-theme" type="radio" value="light" />
      <span class="text">{t(Astro.currentLocale, 'light')}</span>
    </label>

    <label class="label">
      <input class="input" name="color-theme" type="radio" value="auto" />
      <span class="text">{t(Astro.currentLocale, 'auto')}</span>
    </label>

    <label class="label">
      <input class="input" name="color-theme" type="radio" value="dark" />
      <span class="text">{t(Astro.currentLocale, 'dark')}</span>
    </label>
  </div>
</fieldset>

<script>
  import { ColorTheme, THEME_CLASSES, THEME_STORAGE_KEY } from '@/utils/constants'

  const toggleElement = document.getElementById('theme-toggle')!

  const applyTheme = (theme: ColorTheme) => {
    if (toggleElement) {
      const input = toggleElement.querySelector(`[value="${theme}"]`)! as HTMLInputElement
      input.checked = true
    }

    document.documentElement.classList.toggle(THEME_CLASSES[ColorTheme.DARK], theme === ColorTheme.DARK)
    document.documentElement.classList.toggle(THEME_CLASSES[ColorTheme.LIGHT], theme === ColorTheme.LIGHT)
  }

  function setCurrentTheme(theme: ColorTheme) {
    localStorage.setItem(THEME_STORAGE_KEY, theme)
  }

  const toggleTheme = (event: Event) => {
    const target = event.target as HTMLInputElement
    const newTheme = target.value as ColorTheme

    if (!newTheme) {
      return
    }

    setCurrentTheme(newTheme)
    applyTheme(newTheme)
  }

  const onStorageChange = (event: StorageEvent) => {
    if (event.key !== THEME_STORAGE_KEY) {
      return
    }

    const newTheme = event.newValue as ColorTheme

    if (!newTheme) {
      return
    }

    applyTheme(newTheme)
  }

  toggleElement.addEventListener('change', toggleTheme)
  window.addEventListener('storage', onStorageChange)
</script>

<style>
  @import '../styles//mixins.css';

  .switcher {
    padding: 0;
    border: unset;
    margin: 0;
  }

  .toggle {
    display: flex;
    padding: 0.25rem;
    border: 1px solid var(--c-theme-switcher-border);
    border-radius: 50px;
    background: var(--c-theme-switcher-bg);
    color: var(--c-theme-switcher-text);
  }

  .label {
    position: relative;
  }

  .input {
    @mixin focus;

    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    border: 0;
    border-radius: 20px;
    margin: 0;
    appearance: none;
    background: 0 0;
    cursor: pointer;

    &:hover + .text {
      opacity: 1;
    }

    &:checked + .text {
      background: var(--c-theme-switcher-select);
      opacity: 1;
    }
  }

  .text {
    display: block;
    padding: 0.4em 0.67em;
    border: 0;
    border-radius: 2em;
    margin: 0;
    appearance: none;
    background-color: transparent;
    color: inherit;
    font: inherit;
    line-height: 1;
    opacity: 0.7;
  }
</style>
